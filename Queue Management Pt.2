//Queue Management pt.2
//Develop functionality to add two queues together
//In the new queue, the elements in the first queue should come first followed by elements from the second queue
//given the Queue class, overload the + operator so the code in main works and adds the two queues 
#include <iostream>
using namespace std;

class Queue {
    int size;
    int* queue;

public:
    Queue() {
        size = 0;
        queue = new int[100];
    }
    void add(int data) {
        queue[size] = data;
        size++;
    }
    void remove() {
        if (size == 0) {
            cout << "Queue is empty" << endl;
            return;
        }
        else {
            for (int i = 0; i < size - 1; i++) {
                queue[i] = queue[i + 1];
            }
            size--;
        }
    }
    void print() {
        if (size == 0) {
            cout << "Queue is empty" << endl;
            return;
        }
        for (int i = 0; i < size; i++) {
            cout << queue[i] << " <- ";
        }
        cout << endl;
    }
    Queue operator+(Queue &q) {
        Queue newQ;
        for (int i = 0; i < this->size; i++) {
            newQ.add(this->queue[i]);
        }
        for (int i = 0; i < q.size; i++) {
            newQ.add(q.queue[i]);
        }
        return newQ;

    }
};

int main() {
    Queue q1;
    q1.add(42); q1.add(2); q1.add(8);  q1.add(1);
    Queue q2;
    q2.add(3); q2.add(66); q2.add(128);  q2.add(5);
    Queue q3 = q1 + q2;
    q1.print();
    q2.print();
    q3.print();

    return 0;
}

